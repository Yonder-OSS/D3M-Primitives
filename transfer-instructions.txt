Instructions for transferring D3M repository from NK Org to OSS Org.

1) Create new directory specific to this primitive under `primitives/` directory under appropriate problem type sub-directory.
2) Add `wrapper.py`, `__init__.py` to this new directory. Inside `wrapper.py` change the following metadata key-value pairs:
    a) "uris" : "https://github.com/Yonder-OSS/D3M-Primitives"
    b) "package_uri" : "git+https://github.com/Yonder-OSS/D3M-Primitives.git@{git_commit}#egg=yonder-primitives"
    c) Double check that the `__version__` global variable is used in the wrapper (scripts will search for these variables).
3) Change primitive class name to include Primitive, e.g. from `Kanine` to `KaninePrimitive` (scripts search for this classname pattern)
4) Create `pipelines/` folder under this new directory.
5) Add pipelines to this new directory.
6) Create `old_scripts/` folder under this new directory.
7) Add old scripts to this new directory. ** Note - top level python scripts (e.g. `generate_annotations.py`) should now subsume the functionality of these individual scripts
8) If this primitive needs extra `util` modules, create new `utils` directory and add those modules here.
9) Update `d3m.primitives` entry points in `setup.py` in top-level of directory
10) Add description of algorithm w/ appropriate references in README.

Instructions for adding serialization capability.

1) Add all class instance variables that are used in `produce()` methods to the Params class as key-value pairs. The value should be the type of the variable.
2) Look at examples of `get_params` and `set_params` in time series primitives. These are called by runtime when `-save` flag is invoked.
3) If, for the life of you, you can't figure out what the type of one instance variable is, you can add `__getstate__` and `__setstate__` methods for these variables
   are serialized without typing information. Example in `ts_forecasting/vector_autoregression/forecasting_var.py`
3) Test implementation with `.test_serialization.sh` script. This script takes two command line arguments: a) path to pipeline, b) name of dataset

Instructions for adding serialization capability.

1) Add all class instance variables that are used in `produce()` methods to the Params class as key-value pairs. The value should be the type of the variable.
2) Look at examples of `get_params` and `set_params` in time series primitives. These are called by runtime when `-save` flag is invoked.
3) If, for the life of you, you can't figure out what the type of one instance variable is, you can add `__getstate__` and `__setstate__` methods for these variables
   are serialized without typing information. Example in `ts_forecasting/vector_autoregression/forecasting_var.py`
4) Make sure to run `generate_annotations.py` before the test script so that annotations are pointing to this repository and not previous repository.
5) Generate new pipeline after generating annotations so this pipeline picks up new annotation
6) Test implementationb with `.test-serialization.sh` script. This script takes two command line arguments: a) path to pipeline, b) name of dataset

TODO:

1) add python script to generate submission pipeline runs (need to indicate somewhere on which datasets to run different pipelines)
2) add python script to test whether submitted pipeline runs can still be run successful (probably should just use Mitar's CI repo)
